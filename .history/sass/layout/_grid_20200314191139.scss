
// .row {
//     max-width: $grid-width;   //we would like to use rem so 1140px/10=114rem; max width means taht if we have enough avalible space then it will have the width that we specified but if there's not enough width so basicilly if the viewport is smaller than we specified then it will simply fill 100% of the available space
//     margin: 0 auto;   //trick to center block elements inside of another block elelemnt; mtop and bottom 0 and left and right auto it means left annd right will be the same
//     &:not(:last-child) {
//         margin-bottom: $gutter-vertical;  // in the end margin-bottom=0; we use not pseudoklas;
//         // @include respond(tab-port) {   // we select everyting except the last child
//         //     margin-bottom: $gutter-vertical-small
//         // }
//     }
//     @include clearfix;
//     [class^="col-"] { // select all elements in which the class atr starts with col; all on the same tame select; ^ select all which starts,* all which contains this oart of col, $ any class which ends col-
//         float: left;
//         &:not(:last-child) {
//             margin-right: $gutter-horizontal;}    //         @include respond(tab-port) {
//     //             margin-right: 0;
//     //             margin-bottom: $gutter-vertical-small
//     //         }
//     //         @include respond(phone) {
//     //             margin-right: 0;
//     //             margin-bottom: $gutter-vertical-small
//     //         }
//     //     }
//     //     @include respond(tab-port) {
//     //         width: 100% !important;
//     //     }
//     // }
//     // @include respond(tab-port) {
//     //     max-width: 50rem;
//     //     padding: 0 3rem;
//     // }     
//      //in calc can do mathematical operations, can mix units in here
//     @function calc-column-width($number-of-columns, $columns-per-row) {
//         @return calc(#{$number-of-columns} * ((100% - (#{$columns-per-row} - 1) * #{$gutter-horizontal}) / #{$columns-per-row}) + (#{$gutter-horizontal} * (#{$number-of-columns - 1})));
//     }
//  

.row {
    max-width: $grid-width;
    margin: 0 auto;

    &:not(:last-child) {
        margin-bottom: $gutter-vertical;

        @include respond(tab-port) { //remove this gutter above
            margin-bottom: $gutter-vertical-small; 
        }
    }
    
    @include clearfix;

    [class^="col-"] {
        float: left;

        &:not(:last-child) {
            margin-right: $gutter-horizontal;

            @include respond(tab-port) { //remove any margin from these columns under
                margin-right: 0; //no gutter
            }
        }

        @include respond(tab-port) {
            width: 100% !important; // all comuns sholuld have width 100%; entire mobile phone webpage will be one single column basically
        }
    }

    .col-1-of-2 {
        width: calc((100% - #{$gutter-horizontal}) / 2);
        
    }

    .col-1-of-3 {
        width: calc((100% - 2 * #{$gutter-horizontal}) / 3);
    }

    .col-2-of-3 {
        width: calc(2 * ((100% - 2 * #{$gutter-horizontal}) / 3) + #{$gutter-horizontal});
    }

    .col-1-of-4 {
        width: calc((100% - 3 * #{$gutter-horizontal}) / 4);
    }

    .col-2-of-4 {
        width: calc(2 * ((100% - 3 * #{$gutter-horizontal}) / 4) + #{$gutter-horizontal});
    }

    .col-3-of-4 {
        width: calc(3 * ((100% - 3 * #{$gutter-horizontal}) / 4) + 2 * #{$gutter-horizontal});
    }

}
